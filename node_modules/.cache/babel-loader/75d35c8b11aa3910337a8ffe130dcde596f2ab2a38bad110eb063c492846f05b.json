{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenny\\\\CS_Projects\\\\CreateX-Capstone-Design\\\\src\\\\pages\\\\Map\\\\map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stops = [{\n  name: \"Stop 1\",\n  location: {\n    lat: 40.715,\n    lng: -74.012\n  },\n  radius: 300\n}, {\n  name: \"Stop 2\",\n  location: {\n    lat: 40.725,\n    lng: -74.002\n  },\n  radius: 200\n}\n// Add more stops as needed\n];\nfunction map() {\n  _s();\n  useEffect(() => {\n    // Initialize the map when the component mounts\n    const map = new google.maps.Map(document.getElementById(\"map\"), {\n      center: {\n        lat: 40.7128,\n        lng: -74.0060\n      },\n      // Initial map center\n      zoom: 12\n    });\n\n    // Add stops and discover neighborhoods for each stop\n    stops.forEach(stop => {\n      addStop(map, stop);\n      discoverNeighborhood(map, stop);\n    });\n  }, []);\n\n  // Function to add markers and circles for each scavenger hunt stop\n  function addStop(map, stop) {\n    const marker = new google.maps.Marker({\n      position: stop.location,\n      map: map,\n      title: stop.name\n    });\n    const circle = new google.maps.Circle({\n      map: map,\n      center: stop.location,\n      radius: stop.radius,\n      // Radius in meters\n      fillColor: \"#FF0000\",\n      fillOpacity: 0.3,\n      strokeColor: \"#FF0000\",\n      strokeOpacity: 0.8,\n      strokeWeight: 2\n    });\n    marker.addListener(\"click\", () => {\n      alert(`Welcome to ${stop.name}! Start your scavenger hunt!`);\n    });\n  }\n\n  // Optional: Function to discover nearby places of interest around each stop\n  function discoverNeighborhood(map, stop) {\n    const service = new google.maps.places.PlacesService(map);\n    const request = {\n      location: stop.location,\n      radius: stop.radius,\n      type: [\"landmark\"] // Adjust type (e.g., \"park\", \"museum\") as needed\n    };\n    service.nearbySearch(request, (results, status) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        results.forEach(place => {\n          new google.maps.Marker({\n            position: place.geometry.location,\n            map: map,\n            title: place.name,\n            icon: {\n              url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n            }\n          });\n        });\n      }\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      height: \"500px\",\n      width: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 10\n  }, this);\n}\n_s(map, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nexport default map;","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","stops","name","location","lat","lng","radius","map","_s","google","maps","Map","document","getElementById","center","zoom","forEach","stop","addStop","discoverNeighborhood","marker","Marker","position","title","circle","Circle","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","addListener","alert","service","places","PlacesService","request","type","nearbySearch","results","status","PlacesServiceStatus","OK","place","geometry","icon","url","id","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/jenny/CS_Projects/CreateX-Capstone-Design/src/pages/Map/map.js"],"sourcesContent":["\r\nimport React, { useEffect } from \"react\";\r\n\r\nconst stops = [\r\n  { name: \"Stop 1\", location: { lat: 40.715, lng: -74.012 }, radius: 300 },\r\n  { name: \"Stop 2\", location: { lat: 40.725, lng: -74.002 }, radius: 200 },\r\n  // Add more stops as needed\r\n];\r\n\r\nfunction map() {\r\n  useEffect(() => {\r\n    // Initialize the map when the component mounts\r\n    const map = new google.maps.Map(document.getElementById(\"map\"), {\r\n      center: { lat: 40.7128, lng: -74.0060 }, // Initial map center\r\n      zoom: 12,\r\n    });\r\n\r\n    // Add stops and discover neighborhoods for each stop\r\n    stops.forEach(stop => {\r\n      addStop(map, stop);\r\n      discoverNeighborhood(map, stop);\r\n    });\r\n  }, []);\r\n\r\n  // Function to add markers and circles for each scavenger hunt stop\r\n  function addStop(map, stop) {\r\n    const marker = new google.maps.Marker({\r\n      position: stop.location,\r\n      map: map,\r\n      title: stop.name,\r\n    });\r\n\r\n    const circle = new google.maps.Circle({\r\n      map: map,\r\n      center: stop.location,\r\n      radius: stop.radius, // Radius in meters\r\n      fillColor: \"#FF0000\",\r\n      fillOpacity: 0.3,\r\n      strokeColor: \"#FF0000\",\r\n      strokeOpacity: 0.8,\r\n      strokeWeight: 2,\r\n    });\r\n\r\n    marker.addListener(\"click\", () => {\r\n      alert(`Welcome to ${stop.name}! Start your scavenger hunt!`);\r\n    });\r\n  }\r\n\r\n  // Optional: Function to discover nearby places of interest around each stop\r\n  function discoverNeighborhood(map, stop) {\r\n    const service = new google.maps.places.PlacesService(map);\r\n    const request = {\r\n      location: stop.location,\r\n      radius: stop.radius,\r\n      type: [\"landmark\"], // Adjust type (e.g., \"park\", \"museum\") as needed\r\n    };\r\n\r\n    service.nearbySearch(request, (results, status) => {\r\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n        results.forEach(place => {\r\n          new google.maps.Marker({\r\n            position: place.geometry.location,\r\n            map: map,\r\n            title: place.name,\r\n            icon: { url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\" },\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  return <div id=\"map\" style={{ height: \"500px\", width: \"100%\" }}></div>;\r\n}\r\n\r\nexport default map;\r\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,KAAK,GAAG,CACZ;EAAEC,IAAI,EAAE,QAAQ;EAAEC,QAAQ,EAAE;IAAEC,GAAG,EAAE,MAAM;IAAEC,GAAG,EAAE,CAAC;EAAO,CAAC;EAAEC,MAAM,EAAE;AAAI,CAAC,EACxE;EAAEJ,IAAI,EAAE,QAAQ;EAAEC,QAAQ,EAAE;IAAEC,GAAG,EAAE,MAAM;IAAEC,GAAG,EAAE,CAAC;EAAO,CAAC;EAAEC,MAAM,EAAE;AAAI;AACvE;AAAA,CACD;AAED,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACbV,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,GAAG,GAAG,IAAIE,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC,EAAE;MAC9DC,MAAM,EAAE;QAAEV,GAAG,EAAE,OAAO;QAAEC,GAAG,EAAE,CAAC;MAAQ,CAAC;MAAE;MACzCU,IAAI,EAAE;IACR,CAAC,CAAC;;IAEF;IACAd,KAAK,CAACe,OAAO,CAACC,IAAI,IAAI;MACpBC,OAAO,CAACX,GAAG,EAAEU,IAAI,CAAC;MAClBE,oBAAoB,CAACZ,GAAG,EAAEU,IAAI,CAAC;IACjC,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,SAASC,OAAOA,CAACX,GAAG,EAAEU,IAAI,EAAE;IAC1B,MAAMG,MAAM,GAAG,IAAIX,MAAM,CAACC,IAAI,CAACW,MAAM,CAAC;MACpCC,QAAQ,EAAEL,IAAI,CAACd,QAAQ;MACvBI,GAAG,EAAEA,GAAG;MACRgB,KAAK,EAAEN,IAAI,CAACf;IACd,CAAC,CAAC;IAEF,MAAMsB,MAAM,GAAG,IAAIf,MAAM,CAACC,IAAI,CAACe,MAAM,CAAC;MACpClB,GAAG,EAAEA,GAAG;MACRO,MAAM,EAAEG,IAAI,CAACd,QAAQ;MACrBG,MAAM,EAAEW,IAAI,CAACX,MAAM;MAAE;MACrBoB,SAAS,EAAE,SAAS;MACpBC,WAAW,EAAE,GAAG;MAChBC,WAAW,EAAE,SAAS;MACtBC,aAAa,EAAE,GAAG;MAClBC,YAAY,EAAE;IAChB,CAAC,CAAC;IAEFV,MAAM,CAACW,WAAW,CAAC,OAAO,EAAE,MAAM;MAChCC,KAAK,CAAC,cAAcf,IAAI,CAACf,IAAI,8BAA8B,CAAC;IAC9D,CAAC,CAAC;EACJ;;EAEA;EACA,SAASiB,oBAAoBA,CAACZ,GAAG,EAAEU,IAAI,EAAE;IACvC,MAAMgB,OAAO,GAAG,IAAIxB,MAAM,CAACC,IAAI,CAACwB,MAAM,CAACC,aAAa,CAAC5B,GAAG,CAAC;IACzD,MAAM6B,OAAO,GAAG;MACdjC,QAAQ,EAAEc,IAAI,CAACd,QAAQ;MACvBG,MAAM,EAAEW,IAAI,CAACX,MAAM;MACnB+B,IAAI,EAAE,CAAC,UAAU,CAAC,CAAE;IACtB,CAAC;IAEDJ,OAAO,CAACK,YAAY,CAACF,OAAO,EAAE,CAACG,OAAO,EAAEC,MAAM,KAAK;MACjD,IAAIA,MAAM,KAAK/B,MAAM,CAACC,IAAI,CAACwB,MAAM,CAACO,mBAAmB,CAACC,EAAE,EAAE;QACxDH,OAAO,CAACvB,OAAO,CAAC2B,KAAK,IAAI;UACvB,IAAIlC,MAAM,CAACC,IAAI,CAACW,MAAM,CAAC;YACrBC,QAAQ,EAAEqB,KAAK,CAACC,QAAQ,CAACzC,QAAQ;YACjCI,GAAG,EAAEA,GAAG;YACRgB,KAAK,EAAEoB,KAAK,CAACzC,IAAI;YACjB2C,IAAI,EAAE;cAAEC,GAAG,EAAE;YAAwD;UACvE,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ;EAEA,oBAAO9C,OAAA;IAAK+C,EAAE,EAAC,KAAK;IAACC,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACxE;AAAC9C,EAAA,CA/DQD,GAAG;AAiEZ,eAAeA,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}